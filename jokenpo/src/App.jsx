import { useEffect } from "react";
import { useState } from "react";
import { ActionsGame } from "./components/actions-game";
import { Button } from "./components/button";
import { Input } from "./components/input";
import { Modal } from "./components/modal";
import { Score } from "./components/score";
import * as C from "./styles";

const messages = {
  rules: {
    title: "REGRAS DO JOGO",
    message:
      "Pedra-papel-tesoura-lagarto-Spock √© uma expans√£o do cl√°ssico m√©todo de sele√ß√£o em jogo de pedra-papel-tesoura. Atua sob o mesmo princ√≠pio b√°sico, mas inclui outras duas armas adicionais: o lagarto e Spock(formada pela sauda√ß√£o dos vulcanos em Star Trek). Isso reduz as chances de uma rodada terminar em um empate. Tesoura corta papel, Papel cobre pedra, Pedra esmaga lagarto, Lagarto envenena Spock, Spock esmaga (ou derrete) tesoura, Tesoura decapita lagarto, Lagarto come papel, Papel refuta Spock, Spock vaporiza pedra, Pedra amassa tesoura.  O desafio aqui √© vencer o computador 10 vezes! Fa√ßa a sua escolha e boa sorte!",
  },
  user: {
    title: "üö® ATEN√á√ÉO üö®",
    message: "Por favor preencha o nome do jogador para come√ßar!",
  },
  computerWin: {
    title: "Deu Ruim üò•",
    message: "N√£o desista, tente novamente!",
  },
  playerWin: {
    title: "Voc√™ Venceu üòÅ",
    message: "Parab√©ns, quero ver ganhar 2 vezes seguida ü§ñ!",
  },
};

const actions = [
  {
    value: 1,
    label: "ü™®",
    description: "Rock",
  },
  {
    value: 2,
    label: "üìú",
    description: "Paper",
  },
  {
    value: 3,
    label: "‚úÇÔ∏è",
    description: "Scissors",
  },
  {
    value: 4,
    label: "ü¶é",
    description: "Scissors",
  },
  {
    value: 5,
    label: "üññüèº",
    description: "Spock",
  },
];

const valueTypeEnum = {
  ROCK: 1,
  PAPER: 2,
  SCISSORS: 3,
  LIZARD: 4,
  SPOCK: 5,
};

function App() {
  const [titleModal, setTitleModal] = useState("");
  const [messageModal, setMessageModal] = useState("");
  const [open, setOpen] = useState(false);
  const [scorePlayerValue, setScorePlayerValue] = useState(0);
  const [scoreComputerValue, setScoreComputerValue] = useState(0);
  const [userAction, setUserAction] = useState("üîí");
  const [computerAction, setComputerAction] = useState("üîí");
  const [textGame, setTextGame] = useState("Iniciar Jogo");
  const [userName, setUserName] = useState("VOC√ä");
  const [playGame, setPlayGame] = useState(false);
  const SCORE_TO_WIN = 10;

  const handleOpenModal = (type) => {
    if (!type) {
      setOpen(false);
      setTitleModal("");
      setMessageModal("");
      resetValues();

      return;
    }
    setTitleModal(messages?.[type]?.title);
    setMessageModal(messages?.[type]?.message);
    setOpen(true);
  };

  const randomActionComputer = () => {
    const number = Math.floor(Math.random() * actions.length);
    return actions[number];
  };

  const handleClick = (value) => {
    setUserAction(value.label);
    const actionComputer = randomActionComputer();
    setComputerAction(actionComputer.label);
    checkWinner(value.value, actionComputer.value);
  };

  const checkWinner = (playerValue, computerValue) => {
    const playerRockWin =
      (playerValue === valueTypeEnum.ROCK &&
        computerValue === valueTypeEnum.SCISSORS) ||
      (playerValue === valueTypeEnum.ROCK &&
        computerValue === valueTypeEnum.LIZARD);

    const playerPaperWin =
      (playerValue === valueTypeEnum.PAPER &&
        computerValue === valueTypeEnum.ROCK) ||
      (playerValue === valueTypeEnum.PAPER &&
        computerValue === valueTypeEnum.SPOCK);

    const playerScissorsWin =
      (playerValue === valueTypeEnum.SCISSORS &&
        computerValue === valueTypeEnum.PAPER) ||
      (playerValue === valueTypeEnum.SCISSORS &&
        computerValue === valueTypeEnum.LIZARD);

    const playerLisardWin =
      (playerValue === valueTypeEnum.LIZARD &&
        computerValue === valueTypeEnum.PAPER) ||
      (playerValue === valueTypeEnum.LIZARD &&
        computerValue === valueTypeEnum.SPOCK);

    const playerSpockWin =
      (playerValue === valueTypeEnum.SPOCK &&
        computerValue === valueTypeEnum.SCISSORS) ||
      (playerValue === valueTypeEnum.SPOCK &&
        computerValue === valueTypeEnum.ROCK);

    const drawerResult = playerValue === computerValue;

    const playerWin =
      playerRockWin ||
      playerPaperWin ||
      playerScissorsWin ||
      playerLisardWin ||
      playerSpockWin;

    if (drawerResult) return setTextGame("Empate ü§î, jogue novamente!");
    if (playerWin) {
      setScorePlayerValue((state) => state + 1);
      return setTextGame("Ganhou üòÅ Jogue novamente!");
    }
    setScoreComputerValue((state) => state + 1);
    return setTextGame("Perdeu üò• Jogue novamente!");
  };

  const handleUserName = (value) => {
    if (!value) {
      return setUserName("VOC√ä");
    }
    setUserName(value);
  };

  const startGame = () => {
    if (userName === "VOC√ä") {
      handleOpenModal("user");
      return;
    }
    if (playGame) return resetValues();
    setPlayGame(true);
  };

  const resetValues = () => {
    setTextGame("Iniciar Jogo");
    setPlayGame(false);
    setScorePlayerValue(0);
    setScoreComputerValue(0);
    setUserAction("üîí");
    setComputerAction("üîí");
  };

  useEffect(() => {
    const checkVictory = () => {
      const playerWin = scorePlayerValue === SCORE_TO_WIN;
      const computerWin = scoreComputerValue === SCORE_TO_WIN;
      if (playerWin) {
        handleOpenModal("playerWin");
        setPlayGame(false);
        return;
      }

      if (computerWin) {
        handleOpenModal("computerWin");
        setPlayGame(false);
        return;
      }
    };

    checkVictory();
  }, [scorePlayerValue, scoreComputerValue]);

  return (
    <C.Container>
      <C.Flex direction="column">
        <C.Typography fontHeight="400" size="32px" lineHeight="48px">
          JOKENPO
        </C.Typography>
        <Input
          placeholder="Digite o nome do jogador"
          onChange={(value) => handleUserName(value)}
        />
        <Button onClick={startGame}>
          {playGame ? "Parar" : "üçÄ Come√ßar o jogo üçÄ"}
        </Button>
        <C.Spacer margin="5px" />
        <Score
          userName={userName}
          scorePlayer={scorePlayerValue}
          scoreComputer={scoreComputerValue}
        />
        <C.Spacer margin="10px" />
        <C.Flex justify="space-around">
          <C.Typography size="32px">{userAction}</C.Typography>
          <C.Typography size="32px">{computerAction}</C.Typography>
        </C.Flex>
        <C.Spacer margin="10px" />
        <C.Flex direction="column" gap="0px">
          <C.Typography>{textGame}</C.Typography>
          <C.Spacer margin="5px" />
          <C.Rules onClick={() => handleOpenModal("rules")}>
            Ver as Regras do jogo
          </C.Rules>
        </C.Flex>
        <C.Spacer margin="10px" />
        <ActionsGame
          actions={actions}
          onClick={(value) => handleClick(value)}
          disabled={!playGame}
        />

        <Modal
          open={open}
          titleModal={titleModal}
          messageModal={messageModal}
          handOpenModal={() => handleOpenModal(null)}
        />
      </C.Flex>
    </C.Container>
  );
}

export default App;
